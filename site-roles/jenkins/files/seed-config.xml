<?xml version='1.0' encoding='UTF-8'?>
<project>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.53">
      <scriptText>job(&apos;OSTKL-init&apos;) {
  customWorkspace(&apos;/opt/tikal&apos;);
  label(&apos;localroot&apos;)
  scm {
    git {
      remote {
        name(&apos;origin&apos;)
        url(&apos;git@github.com:tikalk/OSTK-playbook.git&apos;)
        credentials(&apos;ostkl-admin&apos;)
      }
      branch(&apos;jenkins_ci&apos;)
    }
  }
  steps {
    shell(&apos;cd /opt/tikal/deploy; ./deploy.sh init&apos;)
  }
  publishers {
    downstream(&apos;OSTKL-reqs&apos;,&apos;SUCCESS&apos;)
  }
}

job(&apos;OSTKL-reqs&apos;) {
  customWorkspace(&apos;/opt/tikal&apos;);
  wrappers {
    runOnSameNodeAs(&apos;OSTKL-init&apos;, true)
  }
  steps {
    shell(&apos;cd /opt/tikal/deploy; ./deploy.sh reqs&apos;)
  }
  publishers {
    downstream(&apos;OSTKL-image&apos;,&apos;SUCCESS&apos;)
  }
}

job(&apos;OSTKL-image&apos;) {
  customWorkspace(&apos;/opt/tikal&apos;);
  wrappers {
    runOnSameNodeAs(&apos;OSTKL-init&apos;, true)
  }
  steps {
    shell(&apos;cd /opt/tikal/deploy; ./deploy.sh image&apos;)
  }
  publishers {
    downstream(&apos;OSTKL-vagrant&apos;,&apos;SUCCESS&apos;)
  }
}

job(&apos;OSTKL-vagrant&apos;) {
  customWorkspace(&apos;/opt/tikal&apos;);
  wrappers {
    runOnSameNodeAs(&apos;OSTKL-init&apos;, true)
  }
  steps {
    shell(&apos;cd /root/.ssh; cat id_rsa.pub &gt; authorized_keys&apos;)
    shell(&apos;cd /home/user/.ssh; cat id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys&apos;)
    shell(&apos;rm -f /root/.ssh/known_hosts&apos;)
    shell(&apos;cd /opt/tikal/deploy; ./deploy.sh vagrant&apos;)
    shell(&apos;ssh-keyscan -H 10.0.10.1 &gt;&gt; ~/.ssh/known_hosts&apos;)
  }
  publishers {
    downstream(&apos;OSTKL-server&apos;,&apos;SUCCESS&apos;)
  }
}

job(&apos;OSTKL-server&apos;) {
  customWorkspace(&apos;/opt/tikal&apos;);
  label(&apos;sanjer&apos;)
  steps {
    shell(&apos;cd /opt/tikal/deploy; ./deploy.sh server&apos;)
  }
  publishers {
    downstream(&apos;OSTKL-pubkey&apos;,&apos;SUCCESS&apos;)
  }
}

job(&apos;OSTKL-pubkey&apos;) {
  customWorkspace(&apos;/opt/tikal&apos;);
  wrappers {
    runOnSameNodeAs(&apos;OSTKL-server&apos;, true)
  }
  steps {
    shell(&apos;cd /opt/tikal/deploy; ./deploy.sh pubkey&apos;)
  }
  publishers {
    downstream(&apos;OSTKL-net&apos;,&apos;SUCCESS&apos;)
  }
}

job(&apos;OSTKL-net&apos;) {
  customWorkspace(&apos;/opt/tikal&apos;);
  wrappers {
    runOnSameNodeAs(&apos;OSTKL-server&apos;, true)
  }
  steps {
    shell(&apos;cd /opt/tikal/deploy; ./deploy.sh net&apos;)
  }
  publishers {
    downstream(&apos;OSTKL-base&apos;,&apos;SUCCESS&apos;)
  }
}

job(&apos;OSTKL-base&apos;) {
  customWorkspace(&apos;/opt/tikal&apos;);
  wrappers {
    runOnSameNodeAs(&apos;OSTKL-server&apos;, true)
  }
  steps {
    shell(&apos;cd /opt/tikal/deploy; ./deploy.sh base&apos;)
  }
}


buildPipelineView(&apos;OSTKL-NEW&apos;) {
  filterBuildQueue()
  filterExecutors()
  title(&apos;Project A CI Pipeline&apos;)
  displayedBuilds(5)
  selectedJob(&apos;OSTKL-init&apos;)
  alwaysAllowManualTrigger()
  showPipelineParameters()
  refreshFrequency(60)
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>